{"version":3,"sources":["util.js","components/Wrong.js","components/Circle.js","components/Cloud.js","components/Cat.js","App.js","serviceWorker.js","index.js"],"names":["getRandomColorNumber","Math","floor","random","config","Wrong","props","cir","document","getElementById","group","goingUp","handleMouseMove","event","scale","clientX","clientY","x","undefined","touches","y","fillColor","mouseX","mouseY","hue","window","innerWidth","lightness","innerHeight","getColorByMousePosition","currentR","getAttribute","currentScale","scaleUp","scaleDown","setAttribute","console","log","addEventListener","className","xmlns","version","stroke","fill","strokeWidth","strokeLinecap","strokeLinejoin","id","r","cx","cy","React","Component","Circle","svg","useRef","useState","numOfPoints","setNumOfPoints","width","setWidth","height","setHeight","radius","min","lines","offset","points","i","point","getPointInCircle","push","getAllPointsInCircle","length","pop","x1","y1","x2","y2","onClick","onLineClicked","key","getAllLinesForCircle","useEffect","handleResize","current","baseVal","value","padding","setTimeout","type","onChange","e","target","defaultValue","max","ref","style","c1","c2","c3","getRandomColor","n","angle","PI","cos","sin","getPath","finalX","finalY","v1","round","v2","v3","Cloud","path","toFixed","d","CatPath","clipRule","CatClip","state","rectangles","groupRef","createRef","onSvgClick","bind","this","nativeEvent","offsetX","offsetY","setState","viewBox","clipPath","map","position","index","Cat","App","exact","render","component","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f25a211.chunk.js","sourcesContent":["/**\n * Return a random color in RGB\n * @returns {string}\n */\nexport function getRandomColor() {\n  const c1 = getRandomColorNumber();\n  const c2 = getRandomColorNumber();\n  const c3 = getRandomColorNumber();\n  return `rgb(${c1},${c2},${c3})`;\n}\n\n/**\n * Return a random number from 0 to 255\n * @returns {number}\n */\nexport function getRandomColorNumber() {\n  return Math.floor(Math.random() * Math.floor(256));\n}\n\n/**\n * Return a color that is proportionate to the width value passed\n * @param {Number} mouseX - the current x value of the mouse/finger\n * @param {Number} mouseY  - the current y value of the mouse/finger\n */\nexport function getColorByMousePosition(mouseX, mouseY) {\n  const hue = (360 * mouseX) / window.innerWidth;\n  const lightness = `${(100 * mouseY) / window.innerHeight}%`;\n  const saturation = \"50%\";\n  return `hsl(${hue}, ${saturation}, ${lightness})`;\n}\n","import { getColorByMousePosition } from \"../util\";\nimport React from \"react\";\n\nconst config = {\n  ratio: 100,\n  stepSize: 20,\n  numOfPoints: \"10\",\n  strokeWidth: \"3px\"\n};\n\nclass Wrong extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const cir = document.getElementById(\"circle\");\n    const group = document.getElementById(\"circleg\");\n    let goingUp = true;\n    function handleMouseMove(event) {\n      if (cir) {\n        const { clientX, clientY } = event;\n        const x = clientX !== undefined ? clientX : event.touches[0].clientX;\n        const y = clientY !== undefined ? clientY : event.touches[0].clientY;\n        const fillColor = getColorByMousePosition(x, y);\n        const maxScale = 2;\n        const minScale = 1;\n        const step = 0.005;\n\n        let scale;\n        // if (match) {\n        const currentR = +cir.getAttribute(\"r\");\n        const currentScale = currentR / config.ratio;\n        const scaleUp = currentScale + step;\n        const scaleDown = currentScale - step;\n        const wouldBeTooBig = scaleUp > maxScale;\n        const wouldBeTooSmall = scaleDown < minScale;\n        if (goingUp && wouldBeTooBig) {\n          goingUp = false;\n        } else if (!goingUp && wouldBeTooSmall) {\n          goingUp = true;\n        }\n        scale = goingUp ? scaleUp : scaleDown;\n        cir.setAttribute(\"cx\", x);\n        cir.setAttribute(\"cy\", y);\n        console.log(currentScale, currentR, scale);\n        cir.setAttribute(\"r\", scale * config.ratio);\n        // cir.style.transform = `translate(${x}px,${y}px) scale(${scaleX},${scaleY})`;\n        // cir.style.transform = `scale(${scaleX},${scaleY})`;\n        // group.setAttribute(\"fill\", `hsl(${fillColor}, 100%, 50%);`);\n        group.setAttribute(\"fill\", fillColor);\n      }\n    }\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"touchmove\", handleMouseMove);\n  }\n\n  render() {\n    const padding = 10;\n\n    return (\n      <>\n        <div className=\"svg-container\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n            <g\n              stroke=\"black\"\n              fill=\"hotpink\"\n              strokeWidth={config.strokeWidth}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              id=\"circleg\"\n            >\n              <circle r={100} id=\"circleee\" cx={0} cy={0} id=\"circle\" />\n            </g>\n          </svg>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Wrong;\n","import { getRandomColor } from \"../util\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst config = {\n  stepSize: 20,\n  radiusFactor: 0.5,\n  numOfPoints: \"10\",\n  strokeWidth: \"3px\"\n};\n\nconst Circle = props => {\n  const svg = useRef(null);\n  const [numOfPoints, setNumOfPoints] = useState(config.numOfPoints);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const radius = Math.min(width, height) * config.radiusFactor;\n  const padding = 10;\n  const offset = radius * config.radiusFactor * 2 + padding;\n  const lines = getAllLinesForCircle(numOfPoints, radius, offset);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(svg.current.width.baseVal.value - padding * 2);\n      setHeight(svg.current.height.baseVal.value - padding * 2);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    setTimeout(handleResize, 0);\n  });\n  return (\n    <>\n      <div className=\"controls\">\n        <label>How many points?</label>\n        <input\n          type=\"number\"\n          onChange={e => setNumOfPoints(e.target.value)}\n          defaultValue={config.numOfPoints}\n          min={3}\n          max={65}\n        />\n      </div>\n      <div className=\"svg-container\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" ref={svg}>\n          <g\n            stroke=\"black\"\n            fill=\"none\"\n            strokeWidth={config.strokeWidth}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            {lines}\n          </g>\n        </svg>\n      </div>\n    </>\n  );\n};\n\nexport default Circle;\n\n/**\n * Return the array of lines between all points in a circle\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {[]}\n */\nexport function getAllLinesForCircle(numOfPoints, radius, offset) {\n  const points = getAllPointsInCircle(numOfPoints, radius, offset);\n  const lines = [];\n\n  while (points.length) {\n    const [x1, y1] = points.pop();\n    for (let i = 0; i < points.length; i++) {\n      const [x2, y2] = points[i];\n      lines.push(\n        <line\n          onClick={onLineClicked}\n          x1={x1}\n          y1={y1}\n          x2={x2}\n          y2={y2}\n          key={`(${x1},${y1}) to (${x2},${y2})`}\n        ></line>\n      );\n    }\n  }\n  return lines;\n}\n\n/**\n * Return the array of points\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {[]}\n */\nexport function getAllPointsInCircle(numOfPoints, radius, offset) {\n  const points = [];\n\n  for (let i = 1; i <= numOfPoints; i++) {\n    const point = getPointInCircle(i, numOfPoints, radius, offset);\n    points.push(point);\n  }\n\n  return points;\n}\n\n/**\n * Called when a line is clicked\n * @param e\n */\nfunction onLineClicked(e) {\n  e.target.style.stroke = getRandomColor();\n}\n\n/**\n * Return a point (equidistant) in a circle in [x,y] coordinates\n * @param n - which point in the order\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {*[]}\n */\nexport function getPointInCircle(n, numOfPoints, radius, offset) {\n  const angle = 2 * (Math.PI / numOfPoints);\n\n  const nthpoint = [\n    radius * Math.cos(n * angle) + offset,\n    radius * Math.sin(n * angle) + offset\n  ];\n  return nthpoint;\n}\n","import { getColorByMousePosition } from \"../util\";\nimport React from \"react\";\n\nlet multiplier = 1;\nlet scaleModifier = 100;\nlet step = 0.1;\nlet scale = 1;\nconst getPath = (x, y) => {\n  // const finalX = (1 / scale) * (-35 + x); //- window.innerWidth / 2;\n  // const finalY = (1 / scale) * y; //- window.innerHeight / 2;\n  const finalX = x - 35;\n  const a = \"το κάτυ\";\n\n  const finalY = y;\n  const v1 = Math.round(20 + multiplier);\n  const v2 = Math.round(15 + multiplier);\n  const v3 = Math.round(10 + multiplier);\n  return `M ${finalX} ${finalY}\n          a ${v1},${v1} 1 0,0 0,40\n          h 50\n          a ${v1},${v1} 1 0,0 0,-40\n          a ${v3},${v3} 1 0,0 -15,-10\n          a ${v2},${v2} 1 0,0 -35,10\n          z`;\n};\n\nclass Cloud extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const path = document.getElementById(\"cloud-path\");\n    const svg = document.getElementById(\"svg-element\");\n    svg.setAttribute(\n      \"viewBox\",\n      `0 0 ${scaleModifier * scale} ${scaleModifier * scale}`\n    );\n    const handleMouseMove = event => {\n      if (path) {\n        const { clientX, clientY } = event;\n        const x = clientX !== undefined ? clientX : event.touches[0].clientX;\n        const y = clientY !== undefined ? clientY : event.touches[0].clientY;\n        path.setAttribute(\"d\", getPath(x, y));\n      }\n    };\n    const handleClick = event => {\n      if (path) {\n        // multiplier += step;\n        scale = +(step + scale).toFixed(1);\n        const { clientX, clientY } = event;\n        const x = clientX !== undefined ? clientX : event.touches[0].clientX;\n        const y = clientY !== undefined ? clientY : event.touches[0].clientY;\n        // path.setAttribute(\"d\", getPath(x, y));\n        // path.setAttribute(\"transform\", `scale(${scale})`);\n        svg.setAttribute(\n          \"viewBox\",\n          `0 0 ${scaleModifier * scale} ${scaleModifier * scale}`\n        );\n      }\n    };\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"touchmove\", handleMouseMove);\n    window.addEventListener(\"click\", handleClick);\n  }\n\n  render() {\n    const padding = 10;\n    const cloudFill = \"aliceblue\";\n    const cloudStroke = \"black\";\n\n    return (\n      <>\n        <div className=\"svg-container\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            version=\"1.1\"\n            fill={cloudFill}\n            stroke={cloudStroke}\n            id=\"svg-element\"\n          >\n            <g width=\"100%\" height=\"100%\">\n              <path d={getPath(0, 0)} id=\"cloud-path\" />\n            </g>\n          </svg>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Cloud;\n","import { getRandomColor } from \"../util\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst Cat = props => {\n  const svg = useRef(null);\n  // const [width, setWidth] = useState(window.innerWidth);\n  // const [height, setHeight] = useState(window.innerHeight);\n  // const padding = 10;\n\n  useEffect(() => {\n    // function handleResize() {\n    //   setWidth(svg.current.width.baseVal.value - padding * 2);\n    //   setHeight(svg.current.height.baseVal.value - padding * 2);\n    // }\n    // window.addEventListener(\"resize\", handleResize);\n    // setTimeout(handleResize, 0);\n  });\n  return (\n    <>\n      <div className=\"svg-container\">\n        {/*<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" ref={svg}>*/}\n        {/*  */}\n        {/*</svg>*/}\n        <CatClip />\n      </div>\n    </>\n  );\n};\n\nconst CatPath = ({ className }) => (\n  <path\n    clipRule=\"evenodd\"\n    className={className}\n    d=\"M54.2,141c-8.6,29.7-34.3,29.5-19.8,79.5c4.2,14.3,13,26.5,24.7,35.6c2.7,2.1,36.4,21.9,37.7,18.4\n\t    c-10.2,26.6-13.6,56.9-11.1,85.3c2.6,29.6-4.5,56.6-11.9,85.2c-0.9,3.5-1.7,7.5,0.2,10.5c1.4,2.3,4.1,3.6,6.6,4.5\n\t    c6.7,2.4,13.9,3.4,20.9,2.9c3.9-0.3,7.9-1,11-3.4c2.8-2.2,4.5-5.4,6.1-8.6c8-16.3,13.8-33.6,17.3-51.4c16.9-2.6,33.8-5.3,50.8-7.9\n\t    c0.7-0.1,1.4-0.2,2,0.1c0.9,0.5,1.2,1.7,1.3,2.7c3.2,24.1,7.2,48,10,72c14.8-0.2,29.6-4.7,41.8-13c-2.8-10.6-5.5-21.3-8.3-31.9\n\t    c-0.6-2.3-1.2-4.9,0-7c1-1.8,3.1-2.6,5.1-3.3c12.2-4.4,25-7.3,38-8.7c3.1,18.6,6.2,37.1,9.3,55.7c0.2,1.5,0.6,3.1,1.8,4\n\t    c1.3,0.9,3,0.8,4.6,0.5c9.3-1.4,18.5-2.7,27.8-4.1c1.4-0.2,2.8-0.4,3.8-1.4c1.1-1,1.4-2.7,1.6-4.2c1.8-15.1,0.5-30.6-3.8-45.2\n\t    c12.3-5,25.2-8.7,38.2-11c3.5,19,5.3,38.3,5.4,57.6c7.4-1.1,14.7-2.3,22.1-3.4c1.4-0.2,2.8-0.5,4-1.2c1.6-1.1,2.5-3,3.2-4.9\n\t    c6.8-18.6,5.8-38.8,1.9-57.9c-3-14.8-13.1-33.1-11.2-48.2c0.8-6.2,3-12.1,4.7-18.1c2.9-10.6,4.1-21.6,6.3-32.3\n\t    c3.4-16.3,9.3-32.1,13-48.3c4.2-18.3,5.4-37.2,5.5-56c0.1-13.7-0.5-27.7-4.5-40.8c-4-13.1-11.9-25.5-23.7-32.6\n\t    c-11.8-7.1-27.7-7.9-38.9,0.1c-9.9,7.1-14.7,19.6-16,31.7c-4.5,39.2,19.6,75.5,28.9,113.8c2.6,10.6,4,22,0.7,32.5\n\t    c-19.2-11.8-33.8-29.3-54-40c-20.4-10.8-43.3-17-66.4-17.4c2.3-22.6,11.9-43.9,13.9-66.9c1.9-22.3-0.3-45.5-10.6-65.7\n\t    c-16.4-32.4-52.6,50-52.6,50s-33.6-28.7-70.5-34.3c-3.5-0.5-19-51.9-19-51.9S66.1,99.6,54.2,141z\n\t    M163.9,175.7c-28.7-15.3-54.1,33.7-24.6,40.3C169.1,222.8,180.5,184.6,163.9,175.7z\n\t    M102.7,144c-22.3-9.4-48.5,21.3-29.9,35.8C91.5,194.4,122.1,152.2,102.7,144z\"\n  />\n);\n\nclass CatClip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rectangles: []\n    };\n    this.groupRef = React.createRef();\n    this.onSvgClick = this.onSvgClick.bind(this);\n  }\n  componentDidMount() {}\n\n  onSvgClick(e) {\n    const group = this.groupRef.current;\n    const x = e.nativeEvent.offsetX;\n    const y = e.nativeEvent.offsetY;\n    this.setState({\n      ...this.state,\n      rectangles: [...this.state.rectangles, { x, y }]\n    });\n    console.log(this.state.rectangles);\n  }\n  render() {\n    return (\n      <svg\n        onClick={this.onSvgClick}\n        version=\"1.1\"\n        id=\"Layer_1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 514.6 516.4\"\n        style={\n          {\n            // enableBackground: \"new 0 0 514.6 516.4;\"\n          }\n        }\n      >\n        <clipPath id=\"cat\">\n          <CatPath />\n        </clipPath>\n        <g clipPath=\"url(#cat)\" width=\"100%\" height=\"100%\" ref={this.groupRef}>\n          {this.state.rectangles.map((position, index) => (\n            <rect\n              x={position.x}\n              y={position.y}\n              width=\"100\"\n              height=\"100\"\n              key={index}\n              fill=\"red\"\n            />\n          ))}\n          <CatPath className=\"catOutline\" />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default Cat;\n","import React from \"react\";\nimport Wrong from \"./components/Wrong\";\nimport Circle from \"./components/Circle\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Cloud from \"./components/Cloud\";\nimport \"./final.css\";\nimport Cat from \"./components/Cat\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <div className=\"container\">\n                <div className=\"row\">\n                  <Wrong />\n                  <Circle />\n                  {/*<Cloud />*/}\n                </div>\n              </div>\n            )}\n          />\n          <Route exact path=\"/circle\" component={Circle} />\n          <Route exact path=\"/wrong\" component={Wrong} />\n          <Route exact path=\"/cloud\" component={Cloud} />\n          <Route exact path=\"/cat\" component={Cat} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}