{"version":3,"sources":["util.js","components/Wrong.js","components/Circle.js","App.js","serviceWorker.js","index.js"],"names":["getRandomColorNumber","Math","floor","random","config","React","Component","Circle","props","svg","useRef","useState","numOfPoints","setNumOfPoints","window","innerWidth","width","setWidth","innerHeight","height","setHeight","radius","min","lines","offset","points","i","point","getPointInCircle","push","getAllPointsInCircle","length","pop","x1","y1","x2","y2","onClick","onLineClicked","key","getAllLinesForCircle","useEffect","handleResize","current","baseVal","value","padding","addEventListener","setTimeout","className","type","onChange","e","target","defaultValue","max","xmlns","version","ref","stroke","fill","strokeWidth","strokeLinecap","strokeLinejoin","style","c1","c2","c3","getRandomColor","n","angle","PI","cos","sin","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76f8d728.chunk.js","sourcesContent":["/**\n * Return a random color in RGB\n * @returns {string}\n */\nexport function getRandomColor() {\n  const c1 = getRandomColorNumber();\n  const c2 = getRandomColorNumber();\n  const c3 = getRandomColorNumber();\n  return `rgb(${c1},${c2},${c3})`;\n}\n\n/**\n * Return a random number from 0 to 255\n * @returns {number}\n */\nexport function getRandomColorNumber() {\n  return Math.floor(Math.random() * Math.floor(256));\n}\n\n/**\n * Return a color that is proportionate to the width value passed\n * @param {Number} mouseX - the current x value of the mouse/finger\n * @param {Number} mouseY  - the current y value of the mouse/finger\n */\nexport function getColorByMousePosition(mouseX, mouseY) {\n  const hue = (360 * mouseX) / window.innerWidth;\n  const lightness = `${(100 * mouseY) / window.innerHeight}%`;\n  const saturation = \"50%\";\n  return `hsl(${hue}, ${saturation}, ${lightness})`;\n}\n","import { getColorByMousePosition } from \"../util\";\nimport React from \"react\";\n\nconst config = {\n  ratio: 100,\n  stepSize: 20,\n  numOfPoints: \"10\",\n  strokeWidth: \"3px\"\n};\n\nclass Wrong extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const cir = document.getElementById(\"circle\");\n    const group = document.getElementById(\"circleg\");\n    let goingUp = true;\n    function handleMouseMove(event) {\n      if (cir) {\n        const { clientX, clientY } = event;\n        const x = clientX !== undefined ? clientX : event.touches[0].clientX;\n        const y = clientY !== undefined ? clientY : event.touches[0].clientY;\n        const fillColor = getColorByMousePosition(x, y);\n        const maxScale = 2;\n        const minScale = 1;\n        const step = 0.005;\n\n        let scale;\n        // if (match) {\n        const currentR = +cir.getAttribute(\"r\");\n        const currentScale = currentR / config.ratio;\n        const scaleUp = currentScale + step;\n        const scaleDown = currentScale - step;\n        const wouldBeTooBig = scaleUp > maxScale;\n        const wouldBeTooSmall = scaleDown < minScale;\n        if (goingUp && wouldBeTooBig) {\n          goingUp = false;\n        } else if (!goingUp && wouldBeTooSmall) {\n          goingUp = true;\n        }\n        scale = goingUp ? scaleUp : scaleDown;\n        cir.setAttribute(\"cx\", x);\n        cir.setAttribute(\"cy\", y);\n        console.log(currentScale, currentR, scale);\n        cir.setAttribute(\"r\", scale * config.ratio);\n        // cir.style.transform = `translate(${x}px,${y}px) scale(${scaleX},${scaleY})`;\n        // cir.style.transform = `scale(${scaleX},${scaleY})`;\n        // group.setAttribute(\"fill\", `hsl(${fillColor}, 100%, 50%);`);\n        group.setAttribute(\"fill\", fillColor);\n      }\n    }\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"touchmove\", handleMouseMove);\n  }\n\n  render() {\n    const padding = 10;\n\n    return (\n      <>\n        <div className=\"svg-container\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n            <g\n              stroke=\"black\"\n              fill=\"hotpink\"\n              strokeWidth={config.strokeWidth}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              id=\"circleg\"\n            >\n              <circle r={100} id=\"circleee\" cx={0} cy={0} id=\"circle\" />\n            </g>\n          </svg>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Wrong;\n","import { getRandomColor } from \"../util\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst config = {\n  stepSize: 20,\n  radiusFactor: 0.5,\n  numOfPoints: \"10\",\n  strokeWidth: \"3px\"\n};\n\nconst Circle = props => {\n  const svg = useRef(null);\n  const [numOfPoints, setNumOfPoints] = useState(config.numOfPoints);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const radius = Math.min(width, height) * config.radiusFactor;\n  const padding = 10;\n  const offset = radius * config.radiusFactor * 2 + padding;\n  const lines = getAllLinesForCircle(numOfPoints, radius, offset);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(svg.current.width.baseVal.value - padding * 2);\n      setHeight(svg.current.height.baseVal.value - padding * 2);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    setTimeout(handleResize, 0);\n  });\n  return (\n    <>\n      <div className=\"controls\">\n        <label>How many points?</label>\n        <input\n          type=\"number\"\n          onChange={e => setNumOfPoints(e.target.value)}\n          defaultValue={config.numOfPoints}\n          min={3}\n          max={65}\n        />\n      </div>\n      <div className=\"svg-container\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" ref={svg}>\n          <g\n            stroke=\"black\"\n            fill=\"none\"\n            strokeWidth={config.strokeWidth}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            {lines}\n          </g>\n        </svg>\n      </div>\n    </>\n  );\n};\n\nexport default Circle;\n\n/**\n * Return the array of lines between all points in a circle\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {[]}\n */\nexport function getAllLinesForCircle(numOfPoints, radius, offset) {\n  const points = getAllPointsInCircle(numOfPoints, radius, offset);\n  const lines = [];\n\n  while (points.length) {\n    const [x1, y1] = points.pop();\n    for (let i = 0; i < points.length; i++) {\n      const [x2, y2] = points[i];\n      lines.push(\n        <line\n          onClick={onLineClicked}\n          x1={x1}\n          y1={y1}\n          x2={x2}\n          y2={y2}\n          key={`(${x1},${y1}) to (${x2},${y2})`}\n        ></line>\n      );\n    }\n  }\n  return lines;\n}\n\n/**\n * Return the array of points\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {[]}\n */\nexport function getAllPointsInCircle(numOfPoints, radius, offset) {\n  const points = [];\n\n  for (let i = 1; i <= numOfPoints; i++) {\n    const point = getPointInCircle(i, numOfPoints, radius, offset);\n    points.push(point);\n  }\n\n  return points;\n}\n\n/**\n * Called when a line is clicked\n * @param e\n */\nfunction onLineClicked(e) {\n  e.target.style.stroke = getRandomColor();\n}\n\n/**\n * Return a point (equidistant) in a circle in [x,y] coordinates\n * @param n - which point in the order\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {*[]}\n */\nexport function getPointInCircle(n, numOfPoints, radius, offset) {\n  const angle = 2 * (Math.PI / numOfPoints);\n\n  const nthpoint = [\n    radius * Math.cos(n * angle) + offset,\n    radius * Math.sin(n * angle) + offset\n  ];\n  return nthpoint;\n}\n","import React from \"react\";\nimport Wrong from \"./components/Wrong\";\nimport Circle from \"./components/Circle\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/*<Wrong />*/}\n      <Circle />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}