{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["config","getPointInCircle","n","numOfPoints","radius","offset","angle","Math","PI","cos","sin","App","svg","useRef","useState","setNumOfPoints","window","innerWidth","width","setWidth","innerHeight","height","setHeight","min","lines","useEffect","handleResize","current","baseVal","value","padding","addEventListener","setTimeout","i","theNextOne","x1","y1","x2","y2","push","key","className","type","onChange","e","target","defaultValue","max","xmlns","version","ref","stroke","fill","strokeWidth","strokeLinecap","strokeLinejoin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oJAEMA,EAGU,GAHVA,EAIS,GAqEf,SAASC,EAAiBC,EAAGC,EAAaC,EAAQC,GAChD,IAAMC,EAAaC,KAAKC,GAAKL,EAAf,EAMd,MAJiB,CACfC,EAASG,KAAKE,IAAIP,EAAII,GAASD,EAC/BD,EAASG,KAAKG,IAAIR,EAAII,GAASD,GAKpBM,MA3Ef,WACE,IAAMC,EAAMC,iBAAO,MADN,GAEYA,iBAAO,MACMC,mBAASd,IAHlC,mBAGNG,EAHM,KAGOY,EAHP,OAIaD,mBAASE,OAAOC,YAJ7B,mBAINC,EAJM,KAICC,EAJD,OAKeL,mBAASE,OAAOI,aAL/B,mBAKNC,EALM,KAKEC,EALF,KAMPlB,EAASG,KAAKgB,IAAIL,EAAOG,GAAUrB,EAEnCK,EAASD,EAASJ,EAAsB,EAD9B,GAEVwB,EAAQ,GAEdC,qBAAU,WACR,SAASC,IACPP,EAASP,EAAIe,QAAQT,MAAMU,QAAQC,MAAQC,IAC3CR,EAAUV,EAAIe,QAAQN,OAAOO,QAAQC,MAAQC,IAE/Cd,OAAOe,iBAAiB,SAAUL,GAClCM,WAAWN,EAAc,MAG3B,IAAK,IAAIO,EAAI,EAAGA,GAAK9B,EAAa8B,IAAK,CACrC,IACMC,EAAaD,EAAI,GAAK9B,EAAc8B,EAAI,EAAI,EAFb,EAGpBhC,EAFDgC,EAE2B9B,EAAaC,EAAQC,GAH3B,mBAG9B8B,EAH8B,KAG1BC,EAH0B,OAIpBnC,EAAiBiC,EAAY/B,EAAaC,EAAQC,GAJ9B,mBAI9BgC,EAJ8B,KAI1BC,EAJ0B,KAMrCd,EAAMe,KAAK,0BAAMJ,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIE,IAAKP,KAGxD,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,YACb,mDACA,2BACEC,KAAK,SACLC,SAAU,SAAAC,GAAC,OAAI7B,EAAe6B,EAAEC,OAAOhB,QACvCiB,aAAc9C,EACduB,IAAK,EACLwB,IAAK,OAGT,yBAAKN,UAAU,iBACb,yBAAKO,MAAM,6BAA6BC,QAAQ,MAAMC,IAAKtC,GAQzD,uBACEuC,OAAO,QACPC,KAAK,OACLC,YAAY,IACZC,cAAc,QACdC,eAAe,SAEd/B,OCvDOgC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.21fd95b8.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst config = {\n  lineWidth: 3,\n  stepSize: 20,\n  radiusFactor: 0.5,\n  numOfPoints: 10\n};\nconst svgNs = \"http://www.w3.org/2000/svg\";\n\nfunction App() {\n  const svg = useRef(null);\n  const numOfPointsInput = useRef(null);\n  const [numOfPoints, setNumOfPoints] = useState(config.numOfPoints);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const radius = Math.min(width, height) * config.radiusFactor;\n  const padding = 10;\n  const offset = radius * config.radiusFactor * 2 + padding;\n  const lines = [];\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(svg.current.width.baseVal.value - padding * 2);\n      setHeight(svg.current.height.baseVal.value - padding * 2);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    setTimeout(handleResize, 0);\n  });\n\n  for (let i = 1; i <= numOfPoints; i++) {\n    const thisOne = i;\n    const theNextOne = i + 1 <= numOfPoints ? i + 1 : 1;\n    const [x1, y1] = getPointInCircle(thisOne, numOfPoints, radius, offset);\n    const [x2, y2] = getPointInCircle(theNextOne, numOfPoints, radius, offset);\n\n    lines.push(<line x1={x1} y1={y1} x2={x2} y2={y2} key={i}></line>);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"controls\">\n        <label>How many points?</label>\n        <input\n          type=\"number\"\n          onChange={e => setNumOfPoints(e.target.value)}\n          defaultValue={config.numOfPoints}\n          min={3}\n          max={500}\n        />\n      </div>\n      <div className=\"svg-container\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" ref={svg}>\n          {/*<circle*/}\n          {/*  cx={offset}*/}\n          {/*  cy={offset}*/}\n          {/*  r={radius}*/}\n          {/*  fill=\"none\"*/}\n          {/*  stroke=\"black\"*/}\n          {/*/>*/}\n          <g\n            stroke=\"black\"\n            fill=\"none\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            {lines}\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nfunction getPointInCircle(n, numOfPoints, radius, offset) {\n  const angle = 2 * (Math.PI / numOfPoints);\n\n  const nthpoint = [\n    radius * Math.cos(n * angle) + offset,\n    radius * Math.sin(n * angle) + offset\n  ];\n  return nthpoint;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}