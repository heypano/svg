{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["config","onLineClicked","e","target","style","stroke","c1","getRandomColorNumber","c2","c3","getRandomColor","getPointInCircle","n","numOfPoints","radius","offset","angle","Math","PI","cos","sin","floor","random","App","svg","useRef","useState","setNumOfPoints","window","innerWidth","width","setWidth","innerHeight","height","setHeight","min","lines","points","i","point","push","getAllPointsInCircle","length","pop","x1","y1","x2","y2","onClick","key","getAllLinesForCircle","useEffect","handleResize","current","baseVal","value","padding","addEventListener","setTimeout","className","type","onChange","defaultValue","max","xmlns","version","ref","fill","strokeWidth","strokeLinecap","strokeLinejoin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oJAEMA,EAEU,GAFVA,EAGS,KAHTA,EAIS,MAuGf,SAASC,EAAcC,GACrBA,EAAEC,OAAOC,MAAMC,OAyBjB,WACE,IAAMC,EAAKC,IACLC,EAAKD,IACLE,EAAKF,IACX,MAAM,OAAN,OAAcD,EAAd,YAAoBE,EAApB,YAA0BC,EAA1B,KA7BwBC,GAW1B,SAASC,EAAiBC,EAAGC,EAAaC,EAAQC,GAChD,IAAMC,EAAaC,KAAKC,GAAKL,EAAf,EAMd,MAJiB,CACfC,EAASG,KAAKE,IAAIP,EAAII,GAASD,EAC/BD,EAASG,KAAKG,IAAIR,EAAII,GAASD,GAoBnC,SAASR,IACP,OAAOU,KAAKI,MAAMJ,KAAKK,SAAWL,KAAKI,MAAM,MAGhCE,MA7If,WACE,IAAMC,EAAMC,iBAAO,MADN,EAEyBC,mBAAS1B,GAFlC,mBAENa,EAFM,KAEOc,EAFP,OAGaD,mBAASE,OAAOC,YAH7B,mBAGNC,EAHM,KAGCC,EAHD,OAIeL,mBAASE,OAAOI,aAJ/B,mBAINC,EAJM,KAIEC,EAJF,KAKPpB,EAASG,KAAKkB,IAAIL,EAAOG,GAAUjC,EAGnCoC,EA+CR,SAA8BvB,EAAaC,EAAQC,GACjD,IAAMsB,EA6BR,SAA8BxB,EAAaC,EAAQC,GAGjD,IAFA,IAAMsB,EAAS,GAENC,EAAI,EAAGA,GAAKzB,EAAayB,IAAK,CACrC,IAAMC,EAAQ5B,EAAiB2B,EAAGzB,EAAaC,EAAQC,GACvDsB,EAAOG,KAAKD,GAGd,OAAOF,EArCQI,CAAqB5B,EAAaC,EAAQC,GACnDqB,EAAQ,GAEd,KAAOC,EAAOK,QAEZ,IAFqB,IAAD,EACHL,EAAOM,MADJ,mBACbC,EADa,KACTC,EADS,KAEXP,EAAI,EAAGA,EAAID,EAAOK,OAAQJ,IAAK,CAAC,IAAD,cACrBD,EAAOC,GADc,GAC/BQ,EAD+B,KAC3BC,EAD2B,KAEtCX,EAAMI,KACJ,0BACEQ,QAAS/C,EACT2C,GAAIA,EACJC,GAAIA,EACJC,GAAIA,EACJC,GAAIA,EACJE,IAAG,WAAML,EAAN,YAAYC,EAAZ,iBAAuBC,EAAvB,YAA6BC,EAA7B,QAKX,OAAOX,EAnEOc,CAAqBrC,EAAaC,EADjCA,EAASd,EAAsB,EAD9B,IAahB,OATAmD,qBAAU,WACR,SAASC,IACPrB,EAASP,EAAI6B,QAAQvB,MAAMwB,QAAQC,MAAQC,IAC3CtB,EAAUV,EAAI6B,QAAQpB,OAAOqB,QAAQC,MAAQC,IAE/C5B,OAAO6B,iBAAiB,SAAUL,GAClCM,WAAWN,EAAc,MAIzB,yBAAKO,UAAU,OACb,yBAAKA,UAAU,YACb,mDACA,2BACEC,KAAK,SACLC,SAAU,SAAA3D,GAAC,OAAIyB,EAAezB,EAAEC,OAAOoD,QACvCO,aAAc9D,EACdmC,IAAK,EACL4B,IAAK,MAGT,yBAAKJ,UAAU,iBACb,yBAAKK,MAAM,6BAA6BC,QAAQ,MAAMC,IAAK1C,GACzD,uBACEnB,OAAO,QACP8D,KAAK,OACLC,YAAapE,EACbqE,cAAc,QACdC,eAAe,SAEdlC,OCrCOmC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.580d2e91.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst config = {\n  stepSize: 20,\n  radiusFactor: 0.5,\n  numOfPoints: \"10\",\n  strokeWidth: \"3px\"\n};\n\nfunction App() {\n  const svg = useRef(null);\n  const [numOfPoints, setNumOfPoints] = useState(config.numOfPoints);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const radius = Math.min(width, height) * config.radiusFactor;\n  const padding = 10;\n  const offset = radius * config.radiusFactor * 2 + padding;\n  const lines = getAllLinesForCircle(numOfPoints, radius, offset);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(svg.current.width.baseVal.value - padding * 2);\n      setHeight(svg.current.height.baseVal.value - padding * 2);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    setTimeout(handleResize, 0);\n  });\n\n  return (\n    <div className=\"app\">\n      <div className=\"controls\">\n        <label>How many points?</label>\n        <input\n          type=\"number\"\n          onChange={e => setNumOfPoints(e.target.value)}\n          defaultValue={config.numOfPoints}\n          min={3}\n          max={65}\n        />\n      </div>\n      <div className=\"svg-container\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" ref={svg}>\n          <g\n            stroke=\"black\"\n            fill=\"none\"\n            strokeWidth={config.strokeWidth}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          >\n            {lines}\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Return the array of lines between all points in a circle\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {[]}\n */\nfunction getAllLinesForCircle(numOfPoints, radius, offset) {\n  const points = getAllPointsInCircle(numOfPoints, radius, offset);\n  const lines = [];\n\n  while (points.length) {\n    const [x1, y1] = points.pop();\n    for (let i = 0; i < points.length; i++) {\n      const [x2, y2] = points[i];\n      lines.push(\n        <line\n          onClick={onLineClicked}\n          x1={x1}\n          y1={y1}\n          x2={x2}\n          y2={y2}\n          key={`(${x1},${y1}) to (${x2},${y2})`}\n        ></line>\n      );\n    }\n  }\n  return lines;\n}\n\n/**\n * Return the array of points\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {[]}\n */\nfunction getAllPointsInCircle(numOfPoints, radius, offset) {\n  const points = [];\n\n  for (let i = 1; i <= numOfPoints; i++) {\n    const point = getPointInCircle(i, numOfPoints, radius, offset);\n    points.push(point);\n  }\n\n  return points;\n}\n\n/**\n * Called when a line is clicked\n * @param e\n */\nfunction onLineClicked(e) {\n  e.target.style.stroke = getRandomColor();\n}\n\n/**\n * Return a point (equidistant) in a circle in [x,y] coordinates\n * @param n - which point in the order\n * @param numOfPoints - how many points total\n * @param radius - what is the radius\n * @param offset - how many px should we offset the circle from 0,0\n * @returns {*[]}\n */\nfunction getPointInCircle(n, numOfPoints, radius, offset) {\n  const angle = 2 * (Math.PI / numOfPoints);\n\n  const nthpoint = [\n    radius * Math.cos(n * angle) + offset,\n    radius * Math.sin(n * angle) + offset\n  ];\n  return nthpoint;\n}\n\n/**\n * Return a random color in RGB\n * @returns {string}\n */\nfunction getRandomColor() {\n  const c1 = getRandomColorNumber();\n  const c2 = getRandomColorNumber();\n  const c3 = getRandomColorNumber();\n  return `rgb(${c1},${c2},${c3})`;\n}\n\n/**\n * Return a random number from 0 to 255\n * @returns {number}\n */\nfunction getRandomColorNumber() {\n  return Math.floor(Math.random() * Math.floor(256));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}