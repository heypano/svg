{"version":3,"sources":["components/Wrong.js","App.js","serviceWorker.js","index.js"],"names":["config","Wrong","props","cir","document","getElementById","goingUp","window","addEventListener","event","scaleX","scaleY","match","style","transform","currentScaleX","currentScaleY","scaleXUp","scaleXDown","scaleYUp","scaleYDown","console","log","clientX","clientY","className","xmlns","version","stroke","fill","strokeWidth","strokeLinecap","strokeLinejoin","r","id","cx","cy","React","Component","App","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMAGA,IAAMA,EAIS,MA2EAC,E,kDAvEb,WAAYC,GAAQ,uCACZA,G,gEAIN,IAAMC,EAAMC,SAASC,eAAe,YAChCC,GAAU,EAuCdC,OAAOC,iBAAiB,aAtCxB,SAAyBC,GACvB,GAAIN,EAAK,CACP,IAQIO,EACAC,EAJEC,EAAQT,EAAIU,MAAMC,UAAUF,MAAM,2BAKxC,GAAIA,EAAO,CACT,IAAMG,GAAiBH,EAAM,GACvBI,GAAiBJ,EAAM,GACvBK,EAAWF,EAXN,KAYLG,EAAaH,EAZR,KAaLI,EAAWH,EAbN,KAcLI,EAAaJ,EAdR,KAkBPV,IAHkBW,EAjBP,GAiB8BE,EAjB9B,GAqBbb,GAAU,GACAA,IAHVY,EAlBa,GAkBYE,EAlBZ,KAsBbd,GAAU,GAEZI,EAASJ,EAAUW,EAAWC,EAC9BP,EAASL,EAAUa,EAAWC,OAE9BV,EAAS,EACTC,EAAS,EAEXU,QAAQC,IAAIZ,EAAQC,EAAQL,GAC5BH,EAAIU,MAAMC,UAAV,oBAAmCL,EAAMc,QAAzC,cAAsDd,EAAMe,QAA5D,OACArB,EAAIU,MAAMC,WAAV,gBAAgCJ,EAAhC,YAA0CC,EAA1C,W,+BASJ,OACE,oCACE,yBAAKc,UAAU,iBACb,yBAAKC,MAAM,6BAA6BC,QAAQ,OAC9C,uBACEC,OAAO,QACPC,KAAK,UACLC,YAAa9B,EACb+B,cAAc,QACdC,eAAe,SAEf,wCAAQC,EAAG,IAAKC,GAAG,WAAWC,GAAI,EAAGC,GAAI,GAAzC,KAA+C,qB,GA/DzCC,IAAMC,WCCXC,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCMce,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAAS9B,MACvB,2DCZN+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASC,eAAe,SDyHpB,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.8e1547ac.chunk.js","sourcesContent":["import { getRandomColor } from \"../util\";\nimport React from \"react\";\n\nconst config = {\n  stepSize: 20,\n  radiusFactor: 0.5,\n  numOfPoints: \"10\",\n  strokeWidth: \"3px\"\n};\n\nclass Wrong extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const cir = document.getElementById(\"circleee\");\n    let goingUp = true;\n    function handleMouseMove(event) {\n      if (cir) {\n        const maxScale = 2;\n        const minScale = 1;\n        const step = 0.005;\n\n        // const [scaleX, scaleY] =\n        const match = cir.style.transform.match(/scale\\((.+),[\\s]*(.+)\\)/);\n        // .split(\",\");\n\n        let scaleX;\n        let scaleY;\n        if (match) {\n          const currentScaleX = +match[1];\n          const currentScaleY = +match[2];\n          const scaleXUp = currentScaleX + step;\n          const scaleXDown = currentScaleX - step;\n          const scaleYUp = currentScaleY + step;\n          const scaleYDown = currentScaleY - step;\n          const wouldBeTooBig = scaleXUp > maxScale || scaleYUp > maxScale;\n          const wouldBeTooSmall =\n            scaleXDown < minScale || scaleYDown < minScale;\n          if (goingUp && wouldBeTooBig) {\n            goingUp = false;\n          } else if (!goingUp && wouldBeTooSmall) {\n            goingUp = true;\n          }\n          scaleX = goingUp ? scaleXUp : scaleXDown;\n          scaleY = goingUp ? scaleYUp : scaleYDown;\n        } else {\n          scaleX = 1;\n          scaleY = 1;\n        }\n        console.log(scaleX, scaleY, goingUp);\n        cir.style.transform = `translate(${event.clientX}px,${event.clientY}px)`;\n        cir.style.transform += `scale(${scaleX},${scaleY})`;\n      }\n    }\n    window.addEventListener(\"mousemove\", handleMouseMove);\n  }\n\n  render() {\n    const padding = 10;\n\n    return (\n      <>\n        <div className=\"svg-container\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n            <g\n              stroke=\"black\"\n              fill=\"hotpink\"\n              strokeWidth={config.strokeWidth}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <circle r={100} id=\"circleee\" cx={0} cy={0} id=\"circleee\" />\n            </g>\n          </svg>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Wrong;\n","import React from \"react\";\nimport Wrong from \"./components/Wrong\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Wrong />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}